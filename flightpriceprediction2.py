# -*- coding: utf-8 -*-
"""FlightPricePrediction2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10j-oq9Cp6P_9XVFYQLG8X645d-r1cNcn
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

np.random.seed(42)

data = pd.read_csv('Clean_Dataset.csv')
data

X = data.drop('price', axis=1)
y = data['price']

# Identify numerical and categorical columns
numerical_cols = X.select_dtypes(include=np.number).columns.tolist()
categorical_cols = X.select_dtypes(include='object').columns.tolist()

# Preprocessing pipeline
numerical_transformer = StandardScaler()
categorical_transformer = OneHotEncoder(drop='first', handle_unknown='ignore')

preprocessor = ColumnTransformer(
    transformers=[
        ('num', numerical_transformer, numerical_cols),
        ('cat', categorical_transformer, categorical_cols)
    ])

# Define regression models and their hyperparameters
models = [
    ('Linear Regression', LinearRegression(), {}),
    ('Ridge Regression', Ridge(random_state=42), {'model__alpha': [0.1, 1.0, 10.0]}),
    ('Lasso Regression', Lasso(random_state=42), {'model__alpha': [0.01, 0.1, 1.0]}),
    ('Decision Tree Regression', DecisionTreeRegressor(random_state=42), {'model__max_depth': [None, 10, 20]}),
    ('Random Forest Regression', RandomForestRegressor(random_state=42), {'model__n_estimators': [100, 200], 'model__max_depth': [None, 10, 20]}),
    ('Gradient Boosting Regression', GradientBoostingRegressor(random_state=42), {'model__n_estimators': [100, 200], 'model__learning_rate': [0.01, 0.1, 0.2]})
]

for name, model, params in models:

# Create a pipeline combining preprocessing and model
    pipeline = Pipeline(steps=[
        ('preprocessor', preprocessor),
        ('model', model)
    ])

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Hyperparameter tuning using GridSearchCV
grid_search = GridSearchCV(pipeline, param_grid=params, cv=5, scoring='neg_mean_squared_error', n_jobs=-1)
grid_search.fit(X_train, y_train)

# Get the best model from grid search
best_model = grid_search.best_estimator_

# Predict on the test data
y_pred = best_model.predict(X_test)

# Evaluate the model
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Model: {name}")
print(f"Best Parameters: {grid_search.best_params_}")
print(f"Mean Absolute Error (MAE): {mae:.2f}")
print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"R-squared (R2): {r2:.2f}")
print("-----------------------------")